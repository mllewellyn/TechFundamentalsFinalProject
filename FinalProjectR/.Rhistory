imgDir <- "/Users/mllewellyn/Dropbox/RPI/Spring_2018/Tech_Fund/Final Project/plots/"
library(readr)
train <- read_csv("~/Dropbox/RPI/Spring_2018/Tech_Fund/Final Project/data/train.csv",
col_types = cols(holiday = col_logical(),
season = col_factor(levels = c("1","2", "3", "4")),
weather = col_factor(levels = c("1", "2", "3", "4")),
workingday = col_logical())
)
levels(train$season) <- c("spring", "summer", "fall", "winter")
# These are descriptiors I created to make the data teasier to understand.
# Here are the true definitions of each level taken from here https://www.kaggle.com/c/bike-sharing-demand/data
#
# 1: Clear, Few clouds, Partly cloudy, Partly cloudy
# 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist
# 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds
# 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog
levels(train$weather) <- c("Good", "Fair", "Poor", "Bad")
View(train)
train_numeric <- train[c("temp", "atemp", "humidity", "windspeed", "casual", "registered", "count")]
train_factor <- train[c( "season", "holiday", "workingday", "weather")]
summary(train_numeric)
summary(train_factor)
png(paste(imgDir, "weather_boxplots.png", sep=""), width=1000, height=1000)
boxplot(train_numeric[c("temp", "atemp", "humidity", "windspeed")], main="Numeric Weather Vars")
dev.off()
png(paste(imgDir, "ridership_boxplots.png", sep=""), width=1000, height=1000)
boxplot(train_numeric[c("casual", "registered", "count")], main="Numeric Ridership Vars")
dev.off()
library(corrplot)
# look at the correlations
cor(train_numeric)
png(paste(imgDir, "corplot.png", sep=""), width=1000, height=1000)
corrplot(cor(train_numeric), method="circle")
dev.off()
# for(col in train_numeric) {
#   hist(col)
# }
library(car)
# Make a giant scatter plot matrix and see if anything jumps out. CPU time is less valuable than brain time.
# png(paste(imgDir, "scatterplotMatrix4000.png", sep=""), width=4000, height=4000)
# scatterplotMatrix(train)
# dev.off()
# png(paste(imgDir, "scatterplotMatrix_numeric4000.png", sep=""), width=4000, height=4000)
# scatterplotMatrix(train_numeric)
# dev.off()
cor(train_numeric)
png(paste(imgDir, "scatterplotMatrix_numeric1000.png", sep=""), width=1000, height=1000)
scatterplotMatrix(train_numeric)
dev.off()
png(paste(imgDir, "scatterplotMatrix_numeric1500.png", sep=""), width=1500, height=1500)
scatterplotMatrix(train_numeric)
dev.off()
imgDir <- "/Users/mllewellyn/Dropbox/RPI/Spring_2018/Tech_Fund/Final Project/plots/"
# ======== Data import and EDA ===========
library(readr)
train <- read_csv("~/Dropbox/RPI/Spring_2018/Tech_Fund/Final Project/data/train.csv",
col_types = cols(holiday = col_logical(),
season = col_factor(levels = c("1","2", "3", "4")),
weather = col_factor(levels = c("1", "2", "3", "4")),
workingday = col_logical())
)
kaggle_test <- read_csv("~/Dropbox/RPI/Spring_2018/Tech_Fund/Final Project/data/test.csv",
col_types = cols(holiday = col_logical(),
season = col_factor(levels = c("1","2", "3", "4")),
weather = col_factor(levels = c("1", "2", "3", "4")),
workingday = col_logical())
)
levels(train$season) <- c("spring", "summer", "fall", "winter")
levels(kaggle_test$season) <- c("spring", "summer", "fall", "winter")
# These are descriptiors I created to make the data teasier to understand.
# Here are the true definitions of each level taken from here https://www.kaggle.com/c/bike-sharing-demand/data
#
# 1: Clear, Few clouds, Partly cloudy, Partly cloudy
# 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist
# 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds
# 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog
levels(train$weather) <- c("Good", "Fair", "Poor", "Bad")
levels(kaggle_test$weather) <- c("Good", "Fair", "Poor", "Bad")
View(train)
train_numeric <- train[c("temp", "atemp", "humidity", "windspeed", "casual", "registered", "count")]
train_factor <- train[c( "season", "holiday", "workingday", "weather")]
test_numeric <- kaggle_test[c("temp", "atemp", "humidity", "windspeed", "casual", "registered", "count")]
test_factor <- kaggle_test[c( "season", "holiday", "workingday", "weather")]
summary(train_numeric)
summary(train_factor)
png(paste(imgDir, "weather_boxplots.png", sep=""), width=1000, height=1000)
boxplot(train_numeric[c("temp", "atemp", "humidity", "windspeed")], main="Numeric Weather Vars")
dev.off()
png(paste(imgDir, "ridership_boxplots.png", sep=""), width=1000, height=1000)
boxplot(train_numeric[c("casual", "registered", "count")], main="Numeric Ridership Vars")
dev.off()
library(corrplot)
# look at the correlations
cor(train_numeric)
png(paste(imgDir, "corplot.png", sep=""), width=1000, height=1000)
corrplot(cor(train_numeric), method="circle")
dev.off()
# for(col in train_numeric) {
#   hist(col)
# }
library(car)
# Make a giant scatter plot matrix and see if anything jumps out. CPU time is less valuable than brain time.
# png(paste(imgDir, "scatterplotMatrix4000.png", sep=""), width=4000, height=4000)
# scatterplotMatrix(train)
# dev.off()
png(paste(imgDir, "scatterplotMatrix_numeric1500.png", sep=""), width=1500, height=1500)
scatterplotMatrix(train_numeric)
dev.off()
# =========== Modeling ==========
# Seperate test data and training data
seed(2791)
sample_rate <- 0.7
total_riders_formula <- formula(count ~ +temp +atemp +humidity +windspeed +season
+holiday +workingday +weather)
training_ids <- sample(1:nrow(train), sample_rate*nrow(train))
bike_train <- subset(train[training_ids,])
testing_ids <- setdiff(1:nrow(train), training_ids)
bike_test <- subset(train[testing_ids,])
# setup accuracy testing function
library(Metrics)
new_data<-bike_test
model <- linear_model
get_test_error <- function(model, new_data) {
# not sure exactly why predict returns a named numeric array but unname fixes it
predictions <- predict(model, newdata=new_data)
# Replace predictions less than 0 with 0 but count them first.
num_terrible_predictions <- length(predictions[predictions < 0])
print(sprintf("There were %d predictions less than 0 replaced with 0", num_terrible_predictions))
predictions[predictions < 0] = 0
rmsle_acc <- rmsle(new_data$count, predictions)
print(sprintf("RMSLE Accuracy = %f", rmsle_acc))
return(rmsle_acc)
}
# Linear Regression
linear_model <- lm(total_riders_formula, data=bike_train)
print("Linear Model Summary")
summary(linear_model)
get_test_error(linear_model, bike_test)
library(MASS)
linear_model_ridege <- lm.ridge(total_riders_formula, data=bike_train, lambda=seq(0,0.1,0.001))
print("Ridge Regression Summary lambda=")
plot(linear_model_ridege)
summary(linear_model_ridege)
get_test_error(linear_model_ridege, bike_test)
# Decision Tree
library(party) # used for decision trees (ctrees)
decision_tree_model <- ctree(total_riders_formula, data=bike_train)
print("Decision Tree Summary")
summary(decision_tree_model)
plot(decision_tree_model)
get_test_error(decision_tree_model, bike_test)
decision_tree_model_2 <- ctree(total_riders_formula, data=bike_train, controls=ctree_control(maxdepth = 3))
print("Decision Tree Summary Depth limited to 3")
summary(decision_tree_model_2)
plot(decision_tree_model_2, main="Decision Tree Max Depth = 3")
get_test_error(decision_tree_model_2, bike_test)
decision_tree_model_3 <- ctree(total_riders_formula, data=bike_train, controls=ctree_control(maxdepth = 4))
print("Decision Tree Summary Depth limited to 4")
summary(decision_tree_model_3)
plot(decision_tree_model_3, main="Decision Tree Max Depth = 4")
get_test_error(decision_tree_model_3, bike_test)
# Random Forest
# library(randomForest) # using cforrest for now because I learned it in another class.
cforest_model <- cforest(total_riders_formula, data=bike_train)
print("Random Forest Summary")
summary(cforest_model)
get_test_error(cforest_model, bike_test)
cforest_model_2 <- cforest(total_riders_formula, data=bike_train,  controls=ctree_control(mtry = 4))
print("Random Forest mtry = 4, Summary")
summary(cforest_model_2)
get_test_error(cforest_model_2, bike_test)
cforest_model_3 <- cforest(total_riders_formula, data=bike_train,  controls=ctree_control(mtry = 7))
print("Random Forest mtry = 7, Summary")
summary(cforest_model_3)
get_test_error(cforest_model_3, bike_test)
png(paste(imgDir, "corplot_small.png", sep=""), width=400, height=400)
corrplot(cor(train_numeric), method="circle")
dev.off()
png(paste(imgDir, "weather_boxplots_small.png", sep=""), width=250, height=250)
boxplot(train_numeric[c("temp", "atemp", "humidity", "windspeed")], main="Numeric Weather Vars")
dev.off()
png(paste(imgDir, "ridership_boxplots_small.png", sep=""), width=250, height=250)
boxplot(train_numeric[c("casual", "registered", "count")], main="Numeric Ridership Vars")
dev.off()
source('~/Dropbox/RPI/Spring_2018/Tech_Fund/Final Project/FinalProjectR/main.R', echo=TRUE)
png(paste(imgDir, "weather_boxplots_small.png", sep=""), width=400, height=400)
boxplot(train_numeric[c("temp", "atemp", "humidity", "windspeed")], main="Numeric Weather Vars")
dev.off()
png(paste(imgDir, "ridership_boxplots_small.png", sep=""), width=400, height=400)
boxplot(train_numeric[c("casual", "registered", "count")], main="Numeric Ridership Vars")
dev.off()
for(col in train_numeric) {
png(paste(imgDir, "hists/", "hist_", name(col), '.png', sep=""), width=200, height=200)
hist(col)
dev.off()
}
for(col in train_numeric) {
png(paste(imgDir, "hists/", "hist_", names(col), '.png', sep=""), width=200, height=200)
hist(col)
dev.off()
}
col
delete(col)
for(col in train_numeric) {
png(paste(imgDir, "hists/", "hist_", names(col), '.png', sep=""), width=200, height=200)
hist(col)
dev.off()
}
png(paste(imgDir, "hists/", "hist_temp.png", sep=""), width=200, height=200)
hist(train["temp",])
dev.off()
png(paste(imgDir, "hists/", "hist_atemp.png", sep=""), width=200, height=200)
hist(train["atemp",])
dev.off()
png(paste(imgDir, "hists/", "hist_humidity.png", sep=""), width=200, height=200)
hist(train["humidity",])
dev.off()
png(paste(imgDir, "hists/", "hist_windspeed.png", sep=""), width=200, height=200)
hist(train["windspeed",])
dev.off()
png(paste(imgDir, "hists/", "hist_casual.png", sep=""), width=200, height=200)
hist(train["casual",])
dev.off()
png(paste(imgDir, "hists/", "hist_registered.png", sep=""), width=200, height=200)
hist(train["registered",])
dev.off()
png(paste(imgDir, "hists/", "hist_count.png", sep=""), width=200, height=200)
hist(train["count",])
dev.off()
train["count",]
train["count"]
png(paste(imgDir, "hists/", "hist_temp.png", sep=""), width=200, height=200)
hist(train["temp"])
dev.off()
png(paste(imgDir, "hists/", "hist_atemp.png", sep=""), width=200, height=200)
hist(train["atemp"])
dev.off()
png(paste(imgDir, "hists/", "hist_humidity.png", sep=""), width=200, height=200)
hist(train["humidity"])
dev.off()
png(paste(imgDir, "hists/", "hist_windspeed.png", sep=""), width=200, height=200)
hist(train["windspeed"])
dev.off()
png(paste(imgDir, "hists/", "hist_casual.png", sep=""), width=200, height=200)
hist(train["casual"])
dev.off()
png(paste(imgDir, "hists/", "hist_registered.png", sep=""), width=200, height=200)
hist(train["registered"])
dev.off()
png(paste(imgDir, "hists/", "hist_count.png", sep=""), width=200, height=200)
hist(train["count"])
dev.off()
png(paste(imgDir, "hists/", "hist_temp.png", sep=""), width=200, height=200)
hist(train$temp)
dev.off()
png(paste(imgDir, "hists/", "hist_atemp.png", sep=""), width=200, height=200)
hist(train$atemp)
dev.off()
png(paste(imgDir, "hists/", "hist_humidity.png", sep=""), width=200, height=200)
hist(train$humidity)
dev.off()
png(paste(imgDir, "hists/", "hist_windspeed.png", sep=""), width=200, height=200)
hist(train$windspeed)
dev.off()
png(paste(imgDir, "hists/", "hist_casual.png", sep=""), width=200, height=200)
hist(train$casual)
dev.off()
png(paste(imgDir, "hists/", "hist_registered.png", sep=""), width=200, height=200)
hist(train$registered)
dev.off()
png(paste(imgDir, "hists/", "hist_count.png", sep=""), width=200, height=200)
hist(train$count)
dev.off()
png(paste(imgDir, "hists/", "hist_temp.png", sep=""), width=400, height=400)
hist(train$temp)
dev.off()
png(paste(imgDir, "hists/", "hist_atemp.png", sep=""), width=400, height=400)
hist(train$atemp)
dev.off()
png(paste(imgDir, "hists/", "hist_humidity.png", sep=""), width=400, height=400)
hist(train$humidity)
dev.off()
png(paste(imgDir, "hists/", "hist_windspeed.png", sep=""), width=400, height=400)
hist(train$windspeed)
dev.off()
png(paste(imgDir, "hists/", "hist_casual.png", sep=""), width=400, height=400)
hist(train$casual)
dev.off()
png(paste(imgDir, "hists/", "hist_registered.png", sep=""), width=400, height=400)
hist(train$registered)
dev.off()
png(paste(imgDir, "hists/", "hist_count.png", sep=""), width=400, height=400)
hist(train$count)
dev.off()
png(paste(imgDir, "hists/", "hist_temp.png", sep=""), width=330, height=330)
hist(train$temp)
dev.off()
png(paste(imgDir, "hists/", "hist_atemp.png", sep=""), width=330, height=330)
hist(train$atemp)
dev.off()
png(paste(imgDir, "hists/", "hist_humidity.png", sep=""), width=330, height=330)
hist(train$humidity)
dev.off()
png(paste(imgDir, "hists/", "hist_windspeed.png", sep=""), width=330, height=330)
hist(train$windspeed)
dev.off()
png(paste(imgDir, "hists/", "hist_casual.png", sep=""), width=330, height=330)
hist(train$casual)
dev.off()
png(paste(imgDir, "hists/", "hist_registered.png", sep=""), width=330, height=330)
hist(train$registered)
dev.off()
png(paste(imgDir, "hists/", "hist_count.png", sep=""), width=330, height=330)
hist(train$count)
dev.off()
linear_model <- lm(total_riders_formula, data=bike_train)
print("Linear Model Summary")
summary(linear_model)
get_test_error(linear_model, bike_test)
imgDir <- "/Users/mllewellyn/Dropbox/RPI/Spring_2018/Tech_Fund/Final Project/plots/"
# ======== Data import and EDA ===========
library(readr)
train <- read_csv("~/Dropbox/RPI/Spring_2018/Tech_Fund/Final Project/data/train.csv",
col_types = cols(holiday = col_logical(),
season = col_factor(levels = c("1","2", "3", "4")),
weather = col_factor(levels = c("1", "2", "3", "4")),
workingday = col_logical())
)
kaggle_test <- read_csv("~/Dropbox/RPI/Spring_2018/Tech_Fund/Final Project/data/test.csv",
col_types = cols(holiday = col_logical(),
season = col_factor(levels = c("1","2", "3", "4")),
weather = col_factor(levels = c("1", "2", "3", "4")),
workingday = col_logical())
)
levels(train$season) <- c("spring", "summer", "fall", "winter")
levels(kaggle_test$season) <- c("spring", "summer", "fall", "winter")
# These are descriptiors I created to make the data teasier to understand.
# Here are the true definitions of each level taken from here https://www.kaggle.com/c/bike-sharing-demand/data
#
# 1: Clear, Few clouds, Partly cloudy, Partly cloudy
# 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist
# 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds
# 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog
levels(train$weather) <- c("Good", "Fair", "Poor", "Bad")
levels(kaggle_test$weather) <- c("Good", "Fair", "Poor", "Bad")
View(train)
train_numeric <- train[c("temp", "atemp", "humidity", "windspeed", "casual", "registered", "count")]
train_factor <- train[c( "season", "holiday", "workingday", "weather")]
test_numeric <- kaggle_test[c("temp", "atemp", "humidity", "windspeed", "casual", "registered", "count")]
test_factor <- kaggle_test[c( "season", "holiday", "workingday", "weather")]
summary(train_numeric)
summary(train_factor)
png(paste(imgDir, "weather_boxplots_small.png", sep=""), width=400, height=400)
boxplot(train_numeric[c("temp", "atemp", "humidity", "windspeed")], main="Numeric Weather Vars")
dev.off()
png(paste(imgDir, "ridership_boxplots_small.png", sep=""), width=400, height=400)
boxplot(train_numeric[c("casual", "registered", "count")], main="Numeric Ridership Vars")
dev.off()
library(corrplot)
# look at the correlations
cor(train_numeric)
png(paste(imgDir, "corplot_small.png", sep=""), width=400, height=400)
corrplot(cor(train_numeric), method="circle")
dev.off()
# make a lot of histograms. Thanks sublime text for multiline editing because I don't know how to use for loops well in R. I should have done this HW in Python.
png(paste(imgDir, "hists/", "hist_temp.png", sep=""), width=330, height=330)
hist(train$temp)
dev.off()
png(paste(imgDir, "hists/", "hist_atemp.png", sep=""), width=330, height=330)
hist(train$atemp)
dev.off()
png(paste(imgDir, "hists/", "hist_humidity.png", sep=""), width=330, height=330)
hist(train$humidity)
dev.off()
png(paste(imgDir, "hists/", "hist_windspeed.png", sep=""), width=330, height=330)
hist(train$windspeed)
dev.off()
png(paste(imgDir, "hists/", "hist_casual.png", sep=""), width=330, height=330)
hist(train$casual)
dev.off()
png(paste(imgDir, "hists/", "hist_registered.png", sep=""), width=330, height=330)
hist(train$registered)
dev.off()
png(paste(imgDir, "hists/", "hist_count.png", sep=""), width=330, height=330)
hist(train$count)
dev.off()
library(car)
# Make a giant scatter plot matrix and see if anything jumps out. CPU time is less valuable than brain time.
# png(paste(imgDir, "scatterplotMatrix4000.png", sep=""), width=4000, height=4000)
# scatterplotMatrix(train)
# dev.off()
# png(paste(imgDir, "scatterplotMatrix_numeric1500.png", sep=""), width=1500, height=1500)
# scatterplotMatrix(train_numeric)
# dev.off()
# =========== Modeling ==========
# Seperate test data and training data
seed(2791)
sample_rate <- 0.7
total_riders_formula <- formula(count ~ +temp +atemp +humidity +windspeed +season
+holiday +workingday +weather)
training_ids <- sample(1:nrow(train), sample_rate*nrow(train))
bike_train <- subset(train[training_ids,])
testing_ids <- setdiff(1:nrow(train), training_ids)
bike_test <- subset(train[testing_ids,])
# setup accuracy testing function
library(Metrics)
new_data<-bike_test
model <- linear_model
get_test_error <- function(model, new_data) {
# not sure exactly why predict returns a named numeric array but unname fixes it
predictions <- predict(model, newdata=new_data)
# Replace predictions less than 0 with 0 but count them first.
num_terrible_predictions <- length(predictions[predictions < 0])
print(sprintf("There were %d predictions less than 0 replaced with 0", num_terrible_predictions))
predictions[predictions < 0] = 0
rmsle_acc <- rmsle(new_data$count, predictions)
print(sprintf("RMSLE Accuracy = %f", rmsle_acc))
return(rmsle_acc)
}
# Linear Regression
linear_model <- lm(total_riders_formula, data=bike_train)
print("Linear Model Summary")
summary(linear_model)
get_test_error(linear_model, bike_test)
seed(2791340)
sample_rate <- 0.7
total_riders_formula <- formula(count ~ +temp +atemp +humidity +windspeed +season
+holiday +workingday +weather)
training_ids <- sample(1:nrow(train), sample_rate*nrow(train))
bike_train <- subset(train[training_ids,])
testing_ids <- setdiff(1:nrow(train), training_ids)
bike_test <- subset(train[testing_ids,])
# setup accuracy testing function
library(Metrics)
new_data<-bike_test
model <- linear_model
get_test_error <- function(model, new_data) {
# not sure exactly why predict returns a named numeric array but unname fixes it
predictions <- predict(model, newdata=new_data)
# Replace predictions less than 0 with 0 but count them first.
num_terrible_predictions <- length(predictions[predictions < 0])
print(sprintf("There were %d predictions less than 0 replaced with 0", num_terrible_predictions))
predictions[predictions < 0] = 0
rmsle_acc <- rmsle(new_data$count, predictions)
print(sprintf("RMSLE Accuracy = %f", rmsle_acc))
return(rmsle_acc)
}
# Linear Regression
linear_model <- lm(total_riders_formula, data=bike_train)
print("Linear Model Summary")
summary(linear_model)
get_test_error(linear_model, bike_test)
print("Random Forest Summary")
summary(cforest_model)
get_test_error(cforest_model, bike_test)
print("Decision Tree Summary")
png(paste(imgDir, "decision_tree_1.png", sep=""), width=500, height=500)
summary(decision_tree_model)
dev.off()
plot(decision_tree_model)
get_test_error(decision_tree_model, bike_test)
png(paste(imgDir, "decision_tree_1.png", sep=""), width=500, height=500)
summary(decision_tree_model)
dev.off()
png(paste(imgDir, "decision_tree_2.png", sep=""), width=500, height=500)
plot(decision_tree_model_2, main="Decision Tree Max Depth = 3")
dev.off()
png(paste(imgDir, "decision_tree_2.png", sep=""), width=500, height=500)
plot(decision_tree_model_2, main="Decision Tree Max Depth = 3")
dev.off()
png(paste(imgDir, "decision_tree_1.png", sep=""), width=500, height=500)
summary(decision_tree_model)
dev.off()
png(paste(imgDir, "decision_tree_3.png", sep=""), width=500, height=500)
plot(decision_tree_model_3, main="Decision Tree Max Depth = 4")
dev.off()
png(paste(imgDir, "decision_tree_1.png", sep=""), width=500, height=500)
summary(decision_tree_model)
dev.off()
print("Decision Tree Summary Depth limited to 3")
get_test_error(decision_tree_model_2, bike_test)
print("Decision Tree Summary Depth limited to 4")
get_test_error(decision_tree_model_3, bike_test)
get_test_error(linear_model, bike_test)
plot(cforest_model)
