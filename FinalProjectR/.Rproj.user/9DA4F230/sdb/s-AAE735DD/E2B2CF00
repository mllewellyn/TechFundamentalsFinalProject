{
    "collab_server" : "",
    "contents" : "imgDir <- \"/Users/mllewellyn/Dropbox/RPI/Spring_2018/Tech_Fund/Final Project/plots/\"\n\n# ======== Data import and EDA ===========\n\nlibrary(readr)\ntrain <- read_csv(\"~/Dropbox/RPI/Spring_2018/Tech_Fund/Final Project/data/train.csv\", \n                  col_types = cols(holiday = col_logical(), \n                                   season = col_factor(levels = c(\"1\",\"2\", \"3\", \"4\")),\n                                   weather = col_factor(levels = c(\"1\", \"2\", \"3\", \"4\")),\n                                   workingday = col_logical())\n)\n\nkaggle_test <- read_csv(\"~/Dropbox/RPI/Spring_2018/Tech_Fund/Final Project/data/test.csv\", \n                  col_types = cols(holiday = col_logical(), \n                                   season = col_factor(levels = c(\"1\",\"2\", \"3\", \"4\")),\n                                   weather = col_factor(levels = c(\"1\", \"2\", \"3\", \"4\")),\n                                   workingday = col_logical())\n)\n\nlevels(train$season) <- c(\"spring\", \"summer\", \"fall\", \"winter\")\nlevels(kaggle_test$season) <- c(\"spring\", \"summer\", \"fall\", \"winter\")\n\n# These are descriptiors I created to make the data teasier to understand.\n# Here are the true definitions of each level taken from here https://www.kaggle.com/c/bike-sharing-demand/data\n# \n# 1: Clear, Few clouds, Partly cloudy, Partly cloudy \n# 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist \n# 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds \n# 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog \nlevels(train$weather) <- c(\"Good\", \"Fair\", \"Poor\", \"Bad\")\nlevels(kaggle_test$weather) <- c(\"Good\", \"Fair\", \"Poor\", \"Bad\")\n\nView(train)\n\ntrain_numeric <- train[c(\"temp\", \"atemp\", \"humidity\", \"windspeed\", \"casual\", \"registered\", \"count\")]\ntrain_factor <- train[c( \"season\", \"holiday\", \"workingday\", \"weather\")]\n\ntest_numeric <- kaggle_test[c(\"temp\", \"atemp\", \"humidity\", \"windspeed\", \"casual\", \"registered\", \"count\")]\ntest_factor <- kaggle_test[c( \"season\", \"holiday\", \"workingday\", \"weather\")]\n\nsummary(train_numeric)\nsummary(train_factor)\n\npng(paste(imgDir, \"weather_boxplots_small.png\", sep=\"\"), width=400, height=400)\nboxplot(train_numeric[c(\"temp\", \"atemp\", \"humidity\", \"windspeed\")], main=\"Numeric Weather Vars\")\ndev.off()\n\npng(paste(imgDir, \"ridership_boxplots_small.png\", sep=\"\"), width=400, height=400)\nboxplot(train_numeric[c(\"casual\", \"registered\", \"count\")], main=\"Numeric Ridership Vars\")\ndev.off()\n\n\nlibrary(corrplot)\n# look at the correlations\ncor(train_numeric)\npng(paste(imgDir, \"corplot_small.png\", sep=\"\"), width=400, height=400)\ncorrplot(cor(train_numeric), method=\"circle\")\ndev.off()\n\n# make a lot of histograms. Thanks sublime text for multiline editing because I don't know how to use for loops well in R. I should have done this HW in Python.\npng(paste(imgDir, \"hists/\", \"hist_temp.png\", sep=\"\"), width=330, height=330)\nhist(train$temp)\ndev.off()\n\npng(paste(imgDir, \"hists/\", \"hist_atemp.png\", sep=\"\"), width=330, height=330)\nhist(train$atemp)\ndev.off()\n\npng(paste(imgDir, \"hists/\", \"hist_humidity.png\", sep=\"\"), width=330, height=330)\nhist(train$humidity)\ndev.off()\n\npng(paste(imgDir, \"hists/\", \"hist_windspeed.png\", sep=\"\"), width=330, height=330)\nhist(train$windspeed)\ndev.off()\n\npng(paste(imgDir, \"hists/\", \"hist_casual.png\", sep=\"\"), width=330, height=330)\nhist(train$casual)\ndev.off()\n\npng(paste(imgDir, \"hists/\", \"hist_registered.png\", sep=\"\"), width=330, height=330)\nhist(train$registered)\ndev.off()\n\npng(paste(imgDir, \"hists/\", \"hist_count.png\", sep=\"\"), width=330, height=330)\nhist(train$count)\ndev.off()\n\n\n\nlibrary(car)\n# Make a giant scatter plot matrix and see if anything jumps out. CPU time is less valuable than brain time.\n# png(paste(imgDir, \"scatterplotMatrix4000.png\", sep=\"\"), width=4000, height=4000)\n# scatterplotMatrix(train)\n# dev.off()\n\n# png(paste(imgDir, \"scatterplotMatrix_numeric1500.png\", sep=\"\"), width=1500, height=1500)\n# scatterplotMatrix(train_numeric)\n# dev.off()\n\n\n\n# =========== Modeling ==========\n\n# Seperate test data and training data\nseed(2791340)\nsample_rate <- 0.7\n\ntotal_riders_formula <- formula(count ~ +temp +atemp +humidity +windspeed +season\n                                +holiday +workingday +weather)\n\ntraining_ids <- sample(1:nrow(train), sample_rate*nrow(train))\nbike_train <- subset(train[training_ids,])\n\ntesting_ids <- setdiff(1:nrow(train), training_ids)\nbike_test <- subset(train[testing_ids,])\n\n# setup accuracy testing function\nlibrary(Metrics)\n\nget_test_error <- function(model, new_data) {\n  # not sure exactly why predict returns a named numeric array but unname fixes it\n  predictions <- predict(model, newdata=new_data)\n  # Replace predictions less than 0 with 0 but count them first.\n  num_terrible_predictions <- length(predictions[predictions < 0])\n  print(sprintf(\"There were %d predictions less than 0 replaced with 0\", num_terrible_predictions))\n  predictions[predictions < 0] = 0\n  rmsle_acc <- rmsle(new_data$count, predictions)\n  print(sprintf(\"RMSLE Accuracy = %f\", rmsle_acc))\n  return(rmsle_acc)\n}\n\n# Null model\naverage_count <- mean(bike_train$count)\nnull_rmsle <- rmsle(bike_test$count, average_count)\nprint(sprintf(\"Null Model RMSLE Accuracy = %f\", null_rmsle))\n\n\n# Linear Regression\n\nlinear_model <- lm(total_riders_formula, data=bike_train)\nprint(\"Linear Model Summary\")\nsummary(linear_model)\nget_test_error(linear_model, bike_test)\n\n\nlinear_model_2 <- lm(count ~ +temp +humidity +season +weather, data=bike_train)\nprint(\"Linear Model 2 Summary\")\nsummary(linear_model_2)\nget_test_error(linear_model_2, bike_test)\n\n# library(MASS)\n# linear_model_ridege <- lm.ridge(total_riders_formula, data=bike_train, lambda=seq(0,0.1,0.001))\n# print(\"Ridge Regression Summary lambda=\")\n# plot(linear_model_ridege)\n# summary(linear_model_ridege)\n# get_test_error(linear_model_ridege, bike_test)\n\n\n# Decision Tree\nlibrary(party) # used for decision trees (ctrees)\ndecision_tree_model <- ctree(total_riders_formula, data=bike_train)\nprint(\"Decision Tree Summary\")\npng(paste(imgDir, \"decision_tree_1.png\", sep=\"\"), width=500, height=500)\nsummary(decision_tree_model)\ndev.off()\nplot(decision_tree_model)\nget_test_error(decision_tree_model, bike_test)\n\ndecision_tree_model_2 <- ctree(total_riders_formula, data=bike_train, controls=ctree_control(maxdepth = 3))\nprint(\"Decision Tree Summary Depth limited to 3\")\nsummary(decision_tree_model_2)\npng(paste(imgDir, \"decision_tree_2.png\", sep=\"\"), width=750, height=500)\nplot(decision_tree_model_2, main=\"Decision Tree Max Depth = 3\")\ndev.off()\nget_test_error(decision_tree_model_2, bike_test)\n\n\ndecision_tree_model_3 <- ctree(total_riders_formula, data=bike_train, controls=ctree_control(maxdepth = 4))\nprint(\"Decision Tree Summary Depth limited to 4\")\nsummary(decision_tree_model_3)\npng(paste(imgDir, \"decision_tree_3.png\", sep=\"\"), width=750, height=500)\nplot(decision_tree_model_3, main=\"Decision Tree Max Depth = 4\")\ndev.off()\nget_test_error(decision_tree_model_3, bike_test)\n\n\n\n# Random Forest\n# library(randomForest) # using cforrest for now because I learned it in another class.\ncforest_model <- cforest(total_riders_formula, data=bike_train)\nprint(\"Random Forest Summary\")\nsummary(cforest_model)\nget_test_error(cforest_model, bike_test)\n\ncforest_model_2 <- cforest(total_riders_formula, data=bike_train,  controls=cforest_control(mtry=3))\nprint(\"Random Forest mtry = 3, Summary\")\nsummary(cforest_model_2)\nget_test_error(cforest_model_2, bike_test)\n\ncforest_model_3 <- cforest(total_riders_formula, data=bike_train,  controls=cforest_control(mtry = 6))\nprint(\"Random Forest mtry = 6, Summary\")\nsummary(cforest_model_3)\nget_test_error(cforest_model_3, bike_test)\n\n",
    "created" : 1522946991066.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2563698833",
    "id" : "E2B2CF00",
    "lastKnownWriteTime" : 1525451839,
    "last_content_update" : 1525451839654,
    "path" : "~/Dropbox/RPI/Spring_2018/Tech_Fund/Final Project/FinalProjectR/main.R",
    "project_path" : "main.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}