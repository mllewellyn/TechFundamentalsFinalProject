{
    "collab_server" : "",
    "contents" : "imgDir <- \"/Users/mllewellyn/Dropbox/RPI/Spring_2017/ITWS-6600 Data Analytics/Assignments/Assignment 6/plots/\"\n\n#### Data Import ####\nlibrary(readr)\nmdf_all <- read_csv(\"~/Dropbox/RPI/Spring_2017/ITWS-6600 Data Analytics/Assignments/Assignment 6/data/r_input_v2.csv\",\n                          col_types = cols(\n                            PURCHASE_ID = col_character(),\n                            TENDER_TYPE = col_factor(c(\"CASH\", \"CREDIT_CARD\", \"GENERIC\", \"NO_SALE\", \"OTHER\")),\n                            DAY_OF_WEEK = col_factor(c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\")),\n                            MONTH = col_integer(),\n                            HOUR_OF_DAY = col_integer(),\n                            TOTAL_COST = col_double(),\n                            AVERAGE_COST = col_double(),\n                            TIP = col_double(),\n                            NUM_NORMAL_QUESADILLAS = col_integer(),\n                            NUM_SPECIAL_QUESADILLAS = col_integer(),\n                            NUM_DRINKS = col_integer(),\n                            NUM_DESSERTS = col_integer(),\n                            NUM_PLATTERS = col_integer(),\n                            NUM_ROCKING_ON_RIVER = col_integer(),\n                            NUM_SIDES = col_integer(),\n                            NUM_OTHER = col_integer(),\n                            NUM_ICECREAM = col_integer(),\n                            NUM_RESTAURANT_WEEK = col_integer(),\n                            NUM_UNCATEGORIZED = col_integer(),\n                            TOTAL_ITEMS = col_integer(),\n                            NUM_MODIFICATIONS_MADE = col_integer(),\n                            AVERAGE_MODIFICATIONS_MADE = col_double(),\n                            AMOUNT_DISCOUNTED = col_double(),\n                            COST_BEFORE_DISCOUNT = col_double(),\n                            # NUM_KIDDIE = col_integer(), # These are not being calculated correctly so ignore them\n                            # NUM_CUSTOM_AMOUNTS = col_integer(),\n                            TIP_PERCENT = col_double(),\n                            DISCOUNT_PERCENT = col_double()\n                          ))\n# The purchase ID is just so I can look at the whole purcahse if something interesting pops up\nmdf <- mdf_all[c(\"TENDER_TYPE\", \"DAY_OF_WEEK\", \"MONTH\", \"HOUR_OF_DAY\",\n                 \"TOTAL_COST\", \"AVERAGE_COST\", \"TIP\", \"NUM_NORMAL_QUESADILLAS\", \"NUM_SPECIAL_QUESADILLAS\",\n                 \"NUM_DRINKS\", \"NUM_DESSERTS\", \"NUM_PLATTERS\", \"NUM_ROCKING_ON_RIVER\",\n                 \"NUM_SIDES\", \"NUM_OTHER\", \"NUM_ICECREAM\",\n                 \"NUM_RESTAURANT_WEEK\", \"NUM_UNCATEGORIZED\", \"TOTAL_ITEMS\", \"NUM_MODIFICATIONS_MADE\", \"AVERAGE_MODIFICATIONS_MADE\",\n                 \"AMOUNT_DISCOUNTED\", \"COST_BEFORE_DISCOUNT\", \"TIP_PERCENT\", \"DISCOUNT_PERCENT\")]\n\n# NOTE: Total items is not in this because it is a sum of the other totals. total cost, total modifications are cost before discount are\n# also omitted for the same reason.\nmdf_only_numbers <- mdf[c(\"MONTH\", \"HOUR_OF_DAY\", \"AVERAGE_COST\", \"TIP_PERCENT\",\n                          \"NUM_NORMAL_QUESADILLAS\", \"NUM_SPECIAL_QUESADILLAS\", \"NUM_DRINKS\",\n                          \"NUM_DESSERTS\", \"NUM_PLATTERS\", \"NUM_ROCKING_ON_RIVER\", \"NUM_SIDES\",\n                          \"NUM_OTHER\", \"NUM_ICECREAM\", \"NUM_RESTAURANT_WEEK\", \"NUM_UNCATEGORIZED\",\n                          \"AVERAGE_MODIFICATIONS_MADE\", \"AMOUNT_DISCOUNTED\")]\n\n# Add another column to the data to see if we can predict tipping\nmdf$DID_TIP <- factor(mdf$TIP > 0)\n\n\n#### Data Exploration ####\n\n\n# library(car)\n# png(paste(imgDir, \"scatterplotMatrix3500.png\", sep=\"\"), width=3500, height=3500)\n# scatterplotMatrix(mdf)\n# dev.off()\n\n\npng(paste(imgDir, \"cost_boxplots.png\", sep=\"\"), width=1200, height=600)\npar(mfrow=c(1,3))\nboxplot(mdf$AVERAGE_COST, main=\"AVERAGE_COST\")\nboxplot(mdf$DISCOUNT_PERCENT, main=\"DISCOUNT_PERCENT\")\nboxplot(mdf$TIP_PERCENT, main=\"TIP_PERCENT\")\npar(mfrow=c(1,1))\ndev.off()\n\n# Box plot of times\npng(paste(imgDir, \"time_boxplots.png\", sep=\"\"))\nboxplot(mdf[c(\"DAY_OF_WEEK\", \"MONTH\", \"HOUR_OF_DAY\")])\ndev.off()\n\npng(paste(imgDir, \"category_count_boxplots.png\", sep=\"\"), width=2000, height=1000)\npar(mfrow=c(3,4))\nboxplot(mdf$NUM_NORMAL_QUESADILLAS[mdf$NUM_NORMAL_QUESADILLAS !=0], main=\"NUM_NORMAL_QUESADILLAS\")\nboxplot(mdf$NUM_SPECIAL_QUESADILLAS[mdf$NUM_SPECIAL_QUESADILLAS !=0], main=\"NUM_SPECIAL_QUESADILLAS\")\nboxplot(mdf$NUM_DRINKS[mdf$NUM_DRINKS !=0], main=\"NUM_DRINKS\")\nboxplot(mdf$NUM_DESSERTS[mdf$NUM_DESSERTS !=0], main=\"NUM_DESSERTS\")\nboxplot(mdf$NUM_PLATTERS[mdf$NUM_PLATTERS !=0], main=\"NUM_PLATTERS\")\nboxplot(mdf$NUM_ROCKING_ON_RIVER[mdf$NUM_ROCKING_ON_RIVER !=0], main=\"NUM_ROCKING_ON_RIVER\")\nboxplot(mdf$NUM_SIDES[mdf$NUM_SIDES !=0], main=\"NUM_SIDES\")\nboxplot(mdf$NUM_OTHER[mdf$NUM_OTHER !=0], main=\"NUM_OTHER\")\nboxplot(mdf$NUM_ICECREAM[mdf$NUM_ICECREAM !=0], main=\"NUM_ICECREAM\")\nboxplot(mdf$NUM_RESTAURANT_WEEK[mdf$NUM_RESTAURANT_WEEK !=0], main=\"NUM_RESTAURANT_WEEK\")\nboxplot(mdf$NUM_UNCATEGORIZED[mdf$NUM_UNCATEGORIZED !=0], main=\"NUM_UNCATEGORIZED\")\nboxplot(mdf$TOTAL_ITEMS[mdf$TOTAL_ITEMS !=0], main=\"TOTAL_ITEMS\")\npar(mfrow=c(1,1))\ndev.off()\n\n\nmake_number_histogram <- function(file_name, mdf_dataframe) {\n  png(paste(imgDir, file_name, sep=\"\"), width=2000, height=2000)\n  par(mfrow=c(4,5))\n  \n  hist(mdf_dataframe$TOTAL_COST[mdf_dataframe$TOTAL_COST > 0 & mdf_dataframe$TOTAL_COST < 60], freq=FALSE, main=\"TOTAL_COST\", breaks=c(0,5,10,15,20,25,30,35,40,45,50,55,60))\n  hist(mdf_dataframe$AVERAGE_COST[mdf_dataframe$AVERAGE_COST > 0 & mdf_dataframe$AVERAGE_COST < 35], freq=FALSE, main=\"AVERAGE_COST\", breaks=c(0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36))\n  \n  # hist(0, main=\"TIP\")\n  # hist(0, main=\"TIP_PERCENT\")\n  hist(mdf_dataframe$TIP[mdf_dataframe$TIP > 0 & mdf_dataframe$TIP < 20], freq=FALSE, main=\"TIP\", breaks=c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))\n  hist(mdf_dataframe$TIP_PERCENT[mdf_dataframe$TIP_PERCENT > 0 & mdf_dataframe$TIP_PERCENT < 40], freq=FALSE, main=\"TIP_PERCENT\", breaks=c(0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40))\n  \n  hist(mdf_dataframe$NUM_NORMAL_QUESADILLAS[mdf_dataframe$NUM_NORMAL_QUESADILLAS > 0 & mdf_dataframe$NUM_NORMAL_QUESADILLAS < 10], freq=FALSE, main=\"NUM_NORMAL_QUESADILLAS\", breaks=c(1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0,5.5,6.0,6.5,7.0,7.5,8.0,8.5,9.0))\n  hist(mdf_dataframe$NUM_SPECIAL_QUESADILLAS[mdf_dataframe$NUM_SPECIAL_QUESADILLAS > 0], freq=FALSE, main=\"NUM_SPECIAL_QUESADILLAS\", breaks=c(1.0,1.2,1.4,1.6,1.8,2.0,2.2,2.4,2.6,2.8,3.0))\n  hist(mdf_dataframe$NUM_DRINKS[mdf_dataframe$NUM_DRINKS > 0], freq=FALSE, main=\"NUM_DRINKS\", breaks=c(1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0,5.5,6.0,6.5,7.0,7.5,8.0,8.5,9.0))\n  hist(mdf_dataframe$NUM_DESSERTS[mdf_dataframe$NUM_DESSERTS > 0], freq=FALSE, main=\"NUM_DESSERTS\", breaks=c(1.0,1.2,1.4,1.6,1.8,2.0,2.2,2.4,2.6,2.8,3.0,3.2,3.4,3.6,3.8,4.0))\n  hist(mdf_dataframe$NUM_PLATTERS[mdf_dataframe$NUM_PLATTERS > 0], freq=FALSE, main=\"NUM_PLATTERS\", breaks=c(1.0,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.0))\n  hist(mdf_dataframe$NUM_ROCKING_ON_RIVER[mdf_dataframe$NUM_ROCKING_ON_RIVER > 0], freq=FALSE, main=\"NUM_ROCKING_ON_RIVER\", breaks=c(1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0))\n  hist(mdf_dataframe$NUM_SIDES[mdf_dataframe$NUM_SIDES > 0 & mdf_dataframe$NUM_SIDES < 6], freq=FALSE, main=\"NUM_SIDES\", breaks=c(1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0))\n  hist(mdf_dataframe$NUM_OTHER[mdf_dataframe$NUM_OTHER > 0], freq=FALSE, main=\"NUM_OTHER\", breaks=c(1.0,1.2,1.4,1.6,1.8,2.0,2.2,2.4,2.6,2.8,3.0))\n  hist(mdf_dataframe$NUM_ICECREAM[mdf_dataframe$NUM_ICECREAM > 0], freq=FALSE, main=\"NUM_ICECREAM\", breaks=c(1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0,5.5,6.0))\n  hist(mdf_dataframe$NUM_RESTAURANT_WEEK[mdf_dataframe$NUM_RESTAURANT_WEEK > 0], freq=FALSE, main=\"NUM_RESTAURANT_WEEK\", breaks=c(1.0,1.5,2.0,2.5,3.0,3.5,4.0))\n  hist(mdf_dataframe$NUM_UNCATEGORIZED[mdf_dataframe$NUM_UNCATEGORIZED > 0], freq=FALSE, main=\"NUM_UNCATEGORIZED\", breaks=c(1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0,5.5,6.0,6.5,7.0))\n  hist(mdf_dataframe$TOTAL_ITEMS[mdf_dataframe$TOTAL_ITEMS > 0 & mdf_dataframe$TOTAL_ITEMS < 15], freq=FALSE, main=\"TOTAL_ITEMS\", breaks=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14))\n  hist(mdf_dataframe$NUM_MODIFICATIONS_MADE[mdf_dataframe$NUM_MODIFICATIONS_MADE > 0 & mdf_dataframe$NUM_MODIFICATIONS_MADE < 20], freq=FALSE, main=\"NUM_MODIFICATIONS_MADE\", breaks=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19))\n  hist(mdf_dataframe$AVERAGE_MODIFICATIONS_MADE[mdf_dataframe$AVERAGE_MODIFICATIONS_MADE > 0], freq=FALSE, main=\"AVERAGE_MODIFICATIONS_MADE\", breaks=c(0.0,0.5,1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0,5.5,6.0,6.5,7.0,7.5,8.0,8.5,9.0,9.5,10.0,10.5,11.0))\n  # hist(mdf_dataframe$AMOUNT_DISCOUNTED[mdf_dataframe$AMOUNT_DISCOUNTED > 0 & mdf_dataframe$AMOUNT_DISCOUNTED < 30], freq=FALSE, main=\"AMOUNT_DISCOUNTED\", breaks=c(0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30))\n  hist(mdf_dataframe$HOUR_OF_DAY, freq=FALSE, main=\"HOUR_OF_DAY\", breaks)\n  hist(mdf_dataframe$DISCOUNT_PERCENT[mdf_dataframe$DISCOUNT_PERCENT > 0], freq=FALSE, main=\"DISCOUNT_PERCENT\", breaks=c(0,2,4,6,8,10,12,14,16,18,20,22,24))\n  par(mfrow=c(1,1))\n  dev.off()\n}\n\n# make_number_histogram(\"number_histograms.png\", mdf)\n# make_number_histogram(\"number_histograms_did_tip_false.png\", mdf[mdf$DID_TIP == \"FALSE\",]) # To use this histogram you need to un comment the tip histograms in the function\n# make_number_histogram(\"number_histograms_did_tip_true.png\", mdf[mdf$DID_TIP == \"TRUE\",])\n\nmake_number_histogram(\"number_histograms_tender_credit.png\", mdf[mdf$TENDER_TYPE == \"CREDIT_CARD\",])\nmake_number_histogram(\"number_histograms_tender_cash.png\", mdf[mdf$TENDER_TYPE == \"CASH\",])\nmake_number_histogram(\"number_histograms_tender_other.png\", mdf[mdf$TENDER_TYPE == \"OTHER\",])\n\npng(paste(imgDir, \"payment_type_bar_chart.png\", sep=\"\"), width=750, height=750)\nplot(mdf$TENDER_TYPE)\ndev.off()\n\n\nlibrary(corrplot)\n\npng(paste(imgDir, \"cor_plot.png\", sep=\"\"), width=1200, height=1200)\ncorrplot(cor(mdf_only_numbers), method=\"circle\")\ndev.off()\n\n\n\nrequire(psych)\npng(paste(imgDir, \"screeplot.png\", sep=\"\"), width=700, height=700)\nscree(mdf_only_numbers)\ndev.off()\n\nmdf_pca <- prcomp(mdf_only_numbers)\nsummary(mdf_pca)\n\n\n\n#### Data Modeling ####\n\n# Seperate test data and training data\nseed(2791)\nsample_rate <- 0.7\n\n# TODO Add in selecting only input columns if needed for KNN\ntraining_ids <- sample(1:nrow(mdf), sample_rate*nrow(mdf))\nmdf_train <- subset(mdf[training_ids,])\n\ntesting_ids <- setdiff(1:nrow(mdf), training_ids)\nmdf_test <- subset(mdf[testing_ids,])\n\n\nlibrary(party)\n\ndid_tip_formula_hard_way <- formula(DID_TIP~ +TENDER_TYPE +DAY_OF_WEEK +MONTH +HOUR_OF_DAY +TOTAL_COST\n                                    +AVERAGE_COST +NUM_NORMAL_QUESADILLAS +NUM_SPECIAL_QUESADILLAS +NUM_DRINKS\n                                    +NUM_DESSERTS +NUM_PLATTERS +NUM_ROCKING_ON_RIVER +NUM_SIDES +NUM_OTHER\n                                    +NUM_ICECREAM +NUM_RESTAURANT_WEEK +NUM_UNCATEGORIZED +TOTAL_ITEMS)\n\n\n\ndid_tip_formula_hard_way_v2 <- formula(DID_TIP~ +TENDER_TYPE +DAY_OF_WEEK +MONTH +HOUR_OF_DAY +TOTAL_COST\n                                    +AVERAGE_COST +NUM_NORMAL_QUESADILLAS +NUM_SPECIAL_QUESADILLAS +NUM_DRINKS\n                                    +NUM_DESSERTS +NUM_PLATTERS +NUM_ROCKING_ON_RIVER +NUM_SIDES +NUM_OTHER\n                                    +NUM_ICECREAM +NUM_RESTAURANT_WEEK +NUM_UNCATEGORIZED +TOTAL_ITEMS\n                                    +NUM_MODIFICATIONS_MADE +AVERAGE_MODIFICATIONS_MADE +AMOUNT_DISCOUNTED\n                                    +COST_BEFORE_DISCOUNT +DISCOUNT_PERCENT)\n\n\ntable_and_acc_rate <- function(model, new_data, test_results) {\n  predictions <- predict(model, newdata=new_data)\n  print(\"Confusion Matrix\")\n  print(table(predictions, test_results, dnn=c(\"Predicted\", \"Real\")))\n  print(\"Accuracy Rate\")\n  print(sum(predictions == test_results) / length(test_results))\n}\n\n\n\n\ndid_tip_tree <- ctree(did_tip_formula_hard_way, data=mdf_train)\npng(paste(imgDir, \"did_tip_tree_v1.png\", sep=\"\"), width=1200, height=1200)\nplot(did_tip_tree)\ndev.off()\nprint(\"Did tip ctree\")\ntable_and_acc_rate(did_tip_tree, mdf_test, mdf_test$DID_TIP)\n\ndid_tip_forest <- cforest(did_tip_formula_hard_way, data=mdf_train)\nprint(\"Did tip cforest\")\ntable_and_acc_rate(did_tip_forest, mdf_test, mdf_test$DID_TIP)\n\ndid_tip_forest_v1.1 <- cforest(did_tip_formula_hard_way, data=mdf_train, controls=cforest_control(mtry=10))\nprint(\"Did tip cforest v1.1\")\ntable_and_acc_rate(did_tip_forest_v1.1, mdf_test, mdf_test$DID_TIP)\n\n# Try again and include more varaibles\ndid_tip_tree_v2 <- ctree(did_tip_formula_hard_way_v2, data=mdf_train)\nprint(\"Did tip ctree v2\")\npng(paste(imgDir, \"did_tip_tree_v2.png\", sep=\"\"), width=1200, height=1200)\nplot(did_tip_tree_v2)\ndev.off()\ntable_and_acc_rate(did_tip_tree_v2, mdf_test, mdf_test$DID_TIP)\n\n# did_tip_forest_v2 <- cforest(did_tip_formula_hard_way_v2, data=mdf_train)\n# print(\"Did tip cforest_v2\")\n# table_and_acc_rate(did_tip_forest_v2, mdf_test$DID_TIP)\n\n# did_tip_forest_v2.1 <- cforest(did_tip_formula_hard_way_v2, data=mdf_train, controls=cforest_control(mtry=10))\n# print(\"Did tip cforest v2.1\")\n# table_and_acc_rate(did_tip_forest_v2.1, mdf_test$DID_TIP)\n\n\nlibrary(e1071)\n\ndid_tip_SVM <- svm(did_tip_formula_hard_way, data=mdf_train)\nprint(\"C-classification linear SVM Results\")\n# table(predict(did_tip_SVM, newdata=mdf_test), mdf_test$DID_TIP, dnn=c(\"Predicted\", \"Real\"))\ntable_and_acc_rate(did_tip_SVM, mdf_test, mdf_test$DID_TIP)\n\ndid_tip_SVM_poly <- svm(did_tip_formula_hard_way, data=mdf_train, kernal=polynomial)\nprint(\"C-classification polynomial SVM Results\")\ntable_and_acc_rate(did_tip_SVM_poly, mdf_test, mdf_test$DID_TIP)\n\ndid_tip_SVM_rb <- svm(did_tip_formula_hard_way, data=mdf_train, kernal=\"radial basis\")\nprint(\"C-classification radial basis SVM Results\")\ntable_and_acc_rate(did_tip_SVM_rb, mdf_test, mdf_test$DID_TIP)\n\ndid_tip_SVM_sig <- svm(did_tip_formula_hard_way, data=mdf_train, kernal=sigmoid)\nprint(\"C-classification sigmoid SVM Results\")\ntable_and_acc_rate(did_tip_SVM_sig, mdf_test, mdf_test$DID_TIP)\n\n# try again with more vars\n\ndid_tip_SVM_v2 <- svm(did_tip_formula_hard_way, data=mdf_train)\nprint(\"C-classification linear SVM Results v2\")\ntable_and_acc_rate(did_tip_SVM_v2, mdf_test, mdf_test$DID_TIP)\n\ndid_tip_SVM_poly_v2 <- svm(did_tip_formula_hard_way, data=mdf_train, kernal=polynomial)\nprint(\"C-classification polynomial SVM Results v2\")\ntable_and_acc_rate(did_tip_SVM_poly_v2, mdf_test, mdf_test$DID_TIP)\n\ndid_tip_SVM_rb_v2 <- svm(did_tip_formula_hard_way, data=mdf_train, kernal=\"radial basis\")\nprint(\"C-classification radial basis SVM Results v2\")\ntable_and_acc_rate(did_tip_SVM_rb_v2, mdf_test, mdf_test$DID_TIP)\n\ndid_tip_SVM_sig_v2 <- svm(did_tip_formula_hard_way, data=mdf_train, kernal=sigmoid)\nprint(\"C-classification sigmoid SVM Results v2\")\ntable_and_acc_rate(did_tip_SVM_sig_v2, mdf_test, mdf_test$DID_TIP)\n\n\n\n# USE PCA for ctree and linear svm\n\n# remove the tip percent from mdf_only_numbers\nmdf_only_numbers_did_tip <- mdf[c(\"MONTH\", \"HOUR_OF_DAY\", \"AVERAGE_COST\",\n                          \"NUM_NORMAL_QUESADILLAS\", \"NUM_SPECIAL_QUESADILLAS\", \"NUM_DRINKS\",\n                          \"NUM_DESSERTS\", \"NUM_PLATTERS\", \"NUM_ROCKING_ON_RIVER\", \"NUM_SIDES\",\n                          \"NUM_OTHER\", \"NUM_ICECREAM\", \"NUM_RESTAURANT_WEEK\", \"NUM_UNCATEGORIZED\",\n                          \"AVERAGE_MODIFICATIONS_MADE\", \"AMOUNT_DISCOUNTED\")]\n\n\nmdf_did_tip_pca <- prcomp(mdf_only_numbers_did_tip)\nsummary(mdf_did_tip_pca) # here we find that the first 5 components explain 98% of the varience\n\npca_train_data <- data.frame(mdf_did_tip_pca$x[training_ids, c(\"PC1\", \"PC2\", \"PC3\", \"PC4\", \"PC5\")], mdf_train$DID_TIP)\ncolnames(pca_train_data) <- c(\"PC1\", \"PC2\", \"PC3\", \"PC4\", \"PC5\", \"DID_TIP\")\npca_test_data <- data.frame(mdf_did_tip_pca$x[testing_ids, c(\"PC1\", \"PC2\", \"PC3\", \"PC4\", \"PC5\")], mdf_test$DID_TIP)\ncolnames(pca_test_data) <- c(\"PC1\", \"PC2\", \"PC3\", \"PC4\", \"PC5\", \"DID_TIP\")\n\n\ndid_tip_pca_tree <- ctree(DID_TIP~., data=pca_train_data)\nprint(\"Did tip PCA Tree\")\ntable_and_acc_rate(did_tip_pca_tree, pca_test_data, pca_test_data$DID_TIP)\npng(paste(imgDir, \"did_tip_pca_tree.png\", sep=\"\"), width=1200, height=1200)\nplot(did_tip_pca_tree)\ndev.off()\n\ndid_tip_pca_forest <- cforest(DID_TIP~., data=pca_train_data, controls=cforest_control(mtry=10))\nprint(\"Did tip pca 10 tree cforest\")\ntable_and_acc_rate(did_tip_pca_forest, pca_test_data, pca_test_data$DID_TIP)\n\n\ndid_tip_pca_svm <- svm(DID_TIP~., data=pca_train_data)\nprint(\"Did tip PCA SVM\")\ntable_and_acc_rate(did_tip_pca_svm, pca_test_data, pca_test_data$DID_TIP)\n\n\n\n\n\nlibrary(class)\n# use KNN to classify test data\nknn_results <- knn(train=mdf_only_numbers[training_ids,], test=mdf_only_numbers[testing_ids,], cl=mdf$DID_TIP[training_ids], k=5)\ntable(knn_results, mdf_test$DID_TIP, dnn=c(\"Predicted\", \"Real\"))\nprint(\"Accuracy Rate\")\nprint(sum(knn_results == mdf_test$DID_TIP) / length(mdf_test$DID_TIP))\n\n\n\n# Now use the same models to predict tender type\n\n\ntender_type_formula_hard_way_v2 <- formula(TENDER_TYPE ~ +DID_TIP +DAY_OF_WEEK +MONTH +HOUR_OF_DAY +TOTAL_COST\n                                       +AVERAGE_COST +NUM_NORMAL_QUESADILLAS +NUM_SPECIAL_QUESADILLAS +NUM_DRINKS\n                                       +NUM_DESSERTS +NUM_PLATTERS +NUM_ROCKING_ON_RIVER +NUM_SIDES +NUM_OTHER\n                                       +NUM_ICECREAM +NUM_RESTAURANT_WEEK +NUM_UNCATEGORIZED +TOTAL_ITEMS\n                                       +NUM_MODIFICATIONS_MADE +AVERAGE_MODIFICATIONS_MADE +AMOUNT_DISCOUNTED\n                                       +COST_BEFORE_DISCOUNT +DISCOUNT_PERCENT +TIP +TIP_PERCENT)\n\n\ntender_tree <- ctree(tender_type_formula_hard_way_v2, data=mdf_train)\npng(paste(imgDir, \"tender_type_ctree.png\", sep=\"\"), width=1200, height=1200)\nplot(tender_tree)\ndev.off()\nprint(\"tender_tree ctree\")\ntable_and_acc_rate(tender_tree, mdf_test, mdf_test$TENDER_TYPE)\n\ntender_forest_v1.1 <- cforest(tender_type_formula_hard_way_v2, data=mdf_train, controls=cforest_control(mtry=10))\nprint(\"tender cforest v1.1\")\ntable_and_acc_rate(tender_forest_v1.1, mdf_test, mdf_test$TENDER_TYPE)\n\n\nlibrary(e1071)\n\ntender_type_SVM <- svm(tender_type_formula_hard_way_v2, data=mdf_train)\nprint(\"Tender Type linear SVM\")\ntable_and_acc_rate(tender_type_SVM, mdf_test, mdf_test$TENDER_TYPE)\n\n\n\npca_train_data_tender <- data.frame(mdf_did_tip_pca$x[training_ids, c(\"PC1\", \"PC2\", \"PC3\", \"PC4\", \"PC5\")], mdf_train$TENDER_TYPE)\ncolnames(pca_train_data_tender) <- c(\"PC1\", \"PC2\", \"PC3\", \"PC4\", \"PC5\", \"TENDER_TYPE\")\npca_test_data_tender <- data.frame(mdf_did_tip_pca$x[testing_ids, c(\"PC1\", \"PC2\", \"PC3\", \"PC4\", \"PC5\")], mdf_test$TENDER_TYPE)\ncolnames(pca_test_data_tender) <- c(\"PC1\", \"PC2\", \"PC3\", \"PC4\", \"PC5\", \"TENDER_TYPE\")\n\n\ntender_type_pca_tree <- ctree(TENDER_TYPE~., data=pca_train_data_tender)\nprint(\"Tender Type PCA Tree\")\ntable_and_acc_rate(tender_type_pca_tree, pca_test_data_tender, pca_test_data_tender$TENDER_TYPE)\n\ntender_type_pca_svm <- svm(TENDER_TYPE~., data=pca_train_data_tender)\nprint(\"Tender Type PCA SVM\")\ntable_and_acc_rate(tender_type_pca_svm, pca_test_data_tender, pca_test_data_tender$TENDER_TYPE)\n\n\nlibrary(class)\n# use KNN to classify test data\nknn_results_tender <- knn(train=mdf_only_numbers_did_tip[training_ids,], test=mdf_only_numbers_did_tip[testing_ids,], cl=mdf$TENDER_TYPE[training_ids], k=5)\nprint(\"Tender Type KNN\")\ntable(knn_results_tender, mdf_test$TENDER_TYPE, dnn=c(\"Predicted\", \"Real\"))\nprint(\"Accuracy Rate\")\nprint(sum(knn_results_tender == mdf_test$TENDER_TYPE) / length(mdf_test$TENDER_TYPE))\n\n\n# next tender type models\n\ntender_forest_100_trees <- cforest(tender_type_formula_hard_way_v2, data=mdf_train, controls=cforest_control(mtry=100))\nprint(\"tender cforest 100 trees\")\ntable_and_acc_rate(tender_forest_100_trees, mdf_test, mdf_test$TENDER_TYPE)\n\n\ndid_tip_SVM_poly_v2 <- svm(did_tip_formula_hard_way, data=mdf_train, kernal=polynomial)\nprint(\"C-classification polynomial SVM Results v2\")\ntable_and_acc_rate(did_tip_SVM_poly_v2, mdf_test, mdf_test$DID_TIP)\n\ndid_tip_SVM_rb_v2 <- svm(did_tip_formula_hard_way, data=mdf_train, kernal=\"radial basis\")\nprint(\"C-classification radial basis SVM Results v2\")\ntable_and_acc_rate(did_tip_SVM_rb_v2, mdf_test, mdf_test$DID_TIP)\n\ndid_tip_SVM_sig_v2 <- svm(did_tip_formula_hard_way, data=mdf_train, kernal=sigmoid)\nprint(\"C-classification sigmoid SVM Results v2\")\ntable_and_acc_rate(did_tip_SVM_sig_v2, mdf_test, mdf_test$DID_TIP)\n\n\n\n\n\n",
    "created" : 1522948537794.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1327011028",
    "id" : "3DD82B2E",
    "lastKnownWriteTime" : 1493348476,
    "last_content_update" : 1493348476,
    "path" : "~/Dropbox/RPI/Spring_2017/ITWS-6600 Data Analytics/Assignments/Assignment 6/code/R/mainv2.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}